facet_wrap(~Line, ncol = 1, strip.position = "right") +
theme_grey(base_size = 15) +
scale_x_continuous(breaks = seq(0,30,1)) +
xlab("missing counts") +
ylab("SNP counts")
dev.off()
library(dplyr)
library(vroom)
library(stringr)
vcf <- "tst.filtered_vcf.table"
sample_info1 <- read.csv("../../sample_info/sample_info_batch1_batch2.csv", stringsAsFactors = F)
# sample info last batch (90 samples, ~5x avg-cvg)
sample_info2 <- read.csv("../../sample_info/sample_info_batch3/sample_info.csv", stringsAsFactors = F)
# Combine both data sets
ss1 <- sample_info1 %>%
dplyr::select(Linie, sample_id) %>%
mutate(target_cvg = "30x")
ss2 <- sample_info2 %>% dplyr::select(Linie, name) %>%
mutate(name = str_remove(name,"-S1")) %>%
dplyr::rename(sample_id = name) %>%
mutate(target_cvg = "5x",
Linie = ifelse(Linie == "HLB", "DUhLB", Linie))
sample_info <- bind_rows(ss1,ss2) %>%
mutate(Linie = factor(Linie, c("DUK","DUC","DU6","DU6P","DUhLB","FZTDU"))) %>%
arrange(Linie, sample_id) %>%
mutate(Linie = as.character(Linie))
# Load genotype table
gt_tab <- vroom(file.path("../output", vcf))
# Prepare col names
names(gt_tab) <- str_remove(names(gt_tab), ".GT") %>% str_remove("-L1")
setwd("/projekte/I2-SOS-FERT/GitHub/WGS_analysis_mmu/batches123_04_FinalVCF/scripts")
library(dplyr)
library(vroom)
library(stringr)
# Define vcf file
#vcf <- "cohort_biallelicSNPs_VQSR95_PASS_AddedMissingness.recode.table"
vcf <- "tst.filtered_vcf.table"
# sample info batch1-2 (60 samples, ~20x)
sample_info1 <- read.csv("../../sample_info/sample_info_batch1_batch2.csv", stringsAsFactors = F)
# sample info last batch (90 samples, ~5x avg-cvg)
sample_info2 <- read.csv("../../sample_info/sample_info_batch3/sample_info.csv", stringsAsFactors = F)
ss1 <- sample_info1 %>%
dplyr::select(Linie, sample_id) %>%
mutate(target_cvg = "30x")
ss2 <- sample_info2 %>% dplyr::select(Linie, name) %>%
mutate(name = str_remove(name,"-S1")) %>%
dplyr::rename(sample_id = name) %>%
mutate(target_cvg = "5x",
Linie = ifelse(Linie == "HLB", "DUhLB", Linie))
sample_info <- bind_rows(ss1,ss2) %>%
mutate(Linie = factor(Linie, c("DUK","DUC","DU6","DU6P","DUhLB","FZTDU"))) %>%
arrange(Linie, sample_id) %>%
mutate(Linie = as.character(Linie))
# Load genotype table
gt_tab <- vroom(file.path("../output", vcf))
tab <- "tst.filtered_vcf.table"
sample_info1 <- read.csv("../../sample_info/sample_info_batch1_batch2.csv", stringsAsFactors = F)
# sample info last batch (90 samples, ~5x avg-cvg)
setwd("/projekte/I2-SOS-FERT/GitHub/WGS_analysis_mmu/batches123_04_FinalVCF/scripts")
library(vroom)
library(dplyr)
library(ggplot2)
library(stringr)
library(reshape2)
# name of data file
tab <- "tst.filtered_vcf.table"
#tab <- "../output/cohort_biallelicSNPs_VQSR95_PASS_AddedMissingness.recode.table"
# sample info batch1-2 (60 samples, ~20x)
sample_info1 <- read.csv("../../sample_info/sample_info_batch1_batch2.csv", stringsAsFactors = F)
# sample info last batch (90 samples, ~5x avg-cvg)
sample_info2 <- read.csv("../../sample_info/sample_info_batch3/sample_info.csv", stringsAsFactors = F)
# Combine both data sets
ss1 <- sample_info1 %>%
dplyr::select(Linie, sample_id) %>%
mutate(target_cvg = "30x")
ss2 <- sample_info2 %>% dplyr::select(Linie, name) %>%
mutate(name = str_remove(name,"-S1")) %>%
dplyr::rename(sample_id = name) %>%
mutate(target_cvg = "5x",
Linie = ifelse(Linie == "HLB", "DUhLB", Linie))
sample_info <- bind_rows(ss1,ss2) %>%
mutate(Linie = factor(Linie, c("DUK","DUC","DU6","DU6P","DUhLB","FZTDU"))) %>%
arrange(Linie, sample_id) %>%
mutate(Linie = as.character(Linie))
dim(sample_info)
# Load genotype table
gt_tab <- vroom(tab)
# Prepare col names
names(gt_tab) <- str_remove(names(gt_tab), ".GT") %>% str_remove("-L1")
# Match order of table and sample info
idx1 <- match(sample_info$sample_id, names(gt_tab))
tmp1 <- gt_tab[,idx1]
gt_tab <- gt_tab %>%
dplyr::select(CHROM,POS) %>%
bind_cols(tmp1)
# columns in the right order?
identical(sample_info$sample_id,names(tmp1))
get_n_miss <- function(l){
i_col <- names(gt_tab) %in% sample_info$sample_id[sample_info$Linie == l]
gt_tab[,i_col] %>% apply(1,function(row_x) sum(row_x == "./."))
}
# Put count missings per populations counts into one data frame
miss_cts <- data.frame(
DUK = get_n_miss("DUK"),
DUC = get_n_miss("DUC"),
DU6 = get_n_miss("DU6"),
DU6P = get_n_miss("DU6P"),
DUhLB = get_n_miss("DUhLB"),
FZTDU = get_n_miss("FZTDU")
)
head(miss_cts)
get_n_not_miss <- function(l){
i_col <- names(gt_tab) %in% sample_info$sample_id[sample_info$Linie == l]
gt_tab[,i_col] %>% apply(1,function(row_x) sum(row_x != "./."))
}
# Put count missings per populations counts into one data frame
not_miss_cts <- data.frame(
DUK = get_n_miss("DUK"),
DUC = get_n_miss("DUC"),
DU6 = get_n_miss("DU6"),
DU6P = get_n_miss("DU6P"),
DUhLB = get_n_miss("DUhLB"),
FZTDU = get_n_miss("FZTDU")
)
head(not_miss_cts)
# make a function to extract number of missing samples per pop at each SNP
get_n_not_miss <- function(l){
i_col <- names(gt_tab) %in% sample_info$sample_id[sample_info$Linie == l]
gt_tab[,i_col] %>% apply(1,function(row_x) sum(row_x != "./."))
}
# Put count missings per populations counts into one data frame
not_miss_cts <- data.frame(
DUK = get_n_not_miss("DUK"),
DUC = get_n_miss("DUC"),
DU6 = get_n_miss("DU6"),
DU6P = get_n_miss("DU6P"),
DUhLB = get_n_miss("DUhLB"),
FZTDU = get_n_miss("FZTDU")
)
head(not_miss_cts)
not_miss_cts <- data.frame(
DUK = get_n_not_miss("DUK"),
DUC = get_n_not_miss("DUC"),
DU6 = get_n_not_miss("DU6"),
DU6P = get_n_not_miss("DU6P"),
DUhLB = get_n_not_miss("DUhLB"),
FZTDU = get_n_not_miss("FZTDU")
)
head(not_miss_cts)
head(miss_cts)
sum(not_miss_cts$DUK >= minN)
minN <- 10
sum(not_miss_cts$DUK >= minN)
sum(head(not_miss_cts$DUK) >= minN)
sum(head(not_miss_cts$DUC) >= minN)
head(not_miss_cts)
sum(head(not_miss_cts$DUC) >= minN)
minN <- 14
sum(head(not_miss_cts$DUC) >= minN)
lapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
minNs <- 25:0
lapply(minNs, function(minN){
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
})
lapply(minNs, function(minN){
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
}) %>% bind_rows()
lapply(minNs, function(minN){
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
})
lapply(minNs, function(minN){
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN) %>% as.data.frame()
})
})
lapply(minNs, function(minN){
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
})
lapply(minNs, function(minN){
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
}) %>% bind_rows()
lapply(minNs, function(minN){
sapply(not_miss_cts, function(col_i){
sum(col_i >= minN)
})
})
head(not_miss_cts$DUK) > 24
head(not_miss_cts$DUC) > 24
x <- head(not_miss_cts$DUK) > 24
y <- head(not_miss_cts$DUC) > 24
bind_rows(x,y)
x
for(minN in minNs){
print(minN)
}
for(minN in minNs){
sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
}
for(i in 1:length(minNs)){
minN <- minNs[i]
sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
}
for(i in 1:length(minNs)){
minN <- minNs[i]
print(
sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
)
}
n_snps <- data.frame()
names(n_snps) <- names(not_miss_cts)
n_snps <- data.frame()
names(n_snps) <- names(not_miss_cts)
n_snps <- data.frame()
n_snps
n_snps <- data.frame()
for(i in 1:length(minNs)){
minN <- minNs[i]
data.frame[i,] <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
}
n_snps
n_snps <- data.frame(
min_called_samples = minNs,
DUK = vector(mode = "numeric", length = length(minNs)),
DUC = vector(mode = "numeric", length = length(minNs)),
DU6 = vector(mode = "numeric", length = length(minNs)),
DU6P = vector(mode = "numeric", length = length(minNs)),
DUhLB = vector(mode = "numeric", length = length(minNs)),
FZTDU = vector(mode = "numeric", length = length(minNs))
)
n_snps
for(i in 1:length(minNs)){
minN <- minNs[i]
data.frame[i,] <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
}
for(i in 1:length(minNs)){
minN <- minNs[i]
n_snps[i,] <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
}
for(i in 1:length(minNs)){
minN <- minNs[i]
n_snps[i,2:ncol(n_snps)] <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
}
n_snps
for(i in 1:length(minNs)){
minN <- minNs[i]
res <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
n_snps[i,2:ncol(n_snps)] <- res/25
}
n_snps
minNs <- 0:25
# Count number of SNPs per population with at least minN calls
n_snps <- data.frame(
min_called_samples = minNs,
DUK = vector(mode = "numeric", length = length(minNs)),
DUC = vector(mode = "numeric", length = length(minNs)),
DU6 = vector(mode = "numeric", length = length(minNs)),
DU6P = vector(mode = "numeric", length = length(minNs)),
DUhLB = vector(mode = "numeric", length = length(minNs)),
FZTDU = vector(mode = "numeric", length = length(minNs))
)
for(i in 1:length(minNs)){
minN <- minNs[i]
res <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
n_snps[i,2:ncol(n_snps)] <- res/25
}
n_snps
n_snps[i,2:ncol(n_snps)] <- res
for(i in 1:length(minNs)){
minN <- minNs[i]
res <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
n_snps[i,2:ncol(n_snps)] <- res
}
n_snps
head(not_miss_cts)
n_snps <- data.frame(
min_called_samples = minNs,
DUK = vector(mode = "numeric", length = length(minNs)),
DUC = vector(mode = "numeric", length = length(minNs)),
DU6 = vector(mode = "numeric", length = length(minNs)),
DU6P = vector(mode = "numeric", length = length(minNs)),
DUhLB = vector(mode = "numeric", length = length(minNs)),
FZTDU = vector(mode = "numeric", length = length(minNs))
)
for(i in 1:length(minNs)){
minN <- minNs[i]
res <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
n_snps[i,2:ncol(n_snps)] <- res/nrow(not_miss_cts)
}
n_snps
for(i in 1:length(minNs)){
minN <- minNs[i]
res <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
n_snps[i,2:ncol(n_snps)] <- round(res/nrow(not_miss_cts),2)
}
n_snps
snps_fraction <- data.frame(
min_called_samples = minNs,
DUK = vector(mode = "numeric", length = length(minNs)),
DUC = vector(mode = "numeric", length = length(minNs)),
DU6 = vector(mode = "numeric", length = length(minNs)),
DU6P = vector(mode = "numeric", length = length(minNs)),
DUhLB = vector(mode = "numeric", length = length(minNs)),
FZTDU = vector(mode = "numeric", length = length(minNs))
)
for(i in 1:length(minNs)){
minN <- minNs[i]
res <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
snps_fraction[i,2:ncol(snps_fraction)] <- round(res/nrow(not_miss_cts),2)
}
snps_fraction
n_snps <- data.frame(
min_called_samples = minNs,
DUK = vector(mode = "numeric", length = length(minNs)),
DUC = vector(mode = "numeric", length = length(minNs)),
DU6 = vector(mode = "numeric", length = length(minNs)),
DU6P = vector(mode = "numeric", length = length(minNs)),
DUhLB = vector(mode = "numeric", length = length(minNs)),
FZTDU = vector(mode = "numeric", length = length(minNs))
)
for(i in 1:length(minNs)){
minN <- minNs[i]
res <- sapply(not_miss_cts, function(col_i) sum(col_i >= minN) )
n_snps[i,2:ncol(n_snps)] <- res
}
n_snps
fraction_snps <- lapply(n_snps[2:ncol(n_snps)], function(x) x/nrow(n_snps))
fraction_snps
fraction_snps <- lapply(n_snps[2:ncol(n_snps)], function(x) x/nrow(n_snps)) %>%
bind_cols()
fraction_snps
fraction_snps <- lapply(n_snps[2:ncol(n_snps)], function(x) x/nrow(n_snps)) %>%
bind_cols() %>%
mutate(min_called_samples = minNs) %>%
dplyr::select(min_called_samples, everything())
fraction_snps
n_snps
pwd()
getwd()
library(dplyr)
library(vroom)
library(stringr)
# Define vcf file
tab <- "tst.filtered_vcf.table"
#tab <- "../output/cohort_biallelicSNPs_VQSR95_PASS_AddedMissingness.recode.table"
# sample info batch1-2 (60 samples, ~20x)
sample_info1 <- read.csv("../../sample_info/sample_info_batch1_batch2.csv", stringsAsFactors = F)
# sample info last batch (90 samples, ~5x avg-cvg)
sample_info2 <- read.csv("../../sample_info/sample_info_batch3/sample_info.csv", stringsAsFactors = F)
# Combine both data sets
ss1 <- sample_info1 %>%
dplyr::select(Linie, sample_id) %>%
mutate(target_cvg = "30x")
ss2 <- sample_info2 %>% dplyr::select(Linie, name) %>%
mutate(name = str_remove(name,"-S1")) %>%
dplyr::rename(sample_id = name) %>%
mutate(target_cvg = "5x",
Linie = ifelse(Linie == "HLB", "DUhLB", Linie))
sample_info <- bind_rows(ss1,ss2) %>%
mutate(Linie = factor(Linie, c("DUK","DUC","DU6","DU6P","DUhLB","FZTDU"))) %>%
arrange(Linie, sample_id) %>%
# Load genotype table
gt_tab <- vroom(tab)
library(dplyr)
library(vroom)
library(stringr)
# Define vcf file
tab <- "tst.filtered_vcf.table"
#tab <- "../output/cohort_biallelicSNPs_VQSR95_PASS_AddedMissingness.recode.table"
# sample info batch1-2 (60 samples, ~20x)
sample_info1 <- read.csv("../../sample_info/sample_info_batch1_batch2.csv", stringsAsFactors = F)
# sample info last batch (90 samples, ~5x avg-cvg)
sample_info2 <- read.csv("../../sample_info/sample_info_batch3/sample_info.csv", stringsAsFactors = F)
# Combine both data sets
ss1 <- sample_info1 %>%
dplyr::select(Linie, sample_id) %>%
mutate(target_cvg = "30x")
ss2 <- sample_info2 %>% dplyr::select(Linie, name) %>%
mutate(name = str_remove(name,"-S1")) %>%
dplyr::rename(sample_id = name) %>%
mutate(target_cvg = "5x",
Linie = ifelse(Linie == "HLB", "DUhLB", Linie))
sample_info <- bind_rows(ss1,ss2) %>%
mutate(Linie = factor(Linie, c("DUK","DUC","DU6","DU6P","DUhLB","FZTDU"))) %>%
arrange(Linie, sample_id) %>%
mutate(Linie = as.character(Linie))
# Load genotype table
gt_tab <- vroom(tab)
names(gt_tab) <- str_remove(names(gt_tab), ".GT") %>% str_remove("-L1")
# Match order of table and sample info
idx1 <- match(sample_info$sample_id, names(gt_tab))
tmp1 <- gt_tab[,idx1]
gt_tab <- gt_tab %>%
dplyr::select(CHROM,POS) %>%
bind_cols(tmp1)
# Colnames match sample info?
identical(sample_info$sample_id,names(tmp1))
minN <- 20
gt_tab %>%
dplyr::select(-CHROM,-POS) %>%
apply(1, function(x){
tapply(x, sample_info$Linie, function(gt) sum(gt != "./.") >= minN) #%>% all()
})
gt_tab %>%
dplyr::select(-CHROM,-POS) %>%
apply(1, function(x){
tapply(x, sample_info$Linie, function(gt) sum(gt != "./.") >= minN) %>% all()
})
x=sample_info[1,]
x
x=gt_tab %>% dplyr::select(-CHROM,-POS) %>% .[1,]
x
tapply(x, sample_info$Linie, function(gt) sum(gt != "./.") >= minN)
x=gt_tab %>% dplyr::select(-CHROM,-POS) %>% .[1,]
x
tapply(x, sample_info$Linie, function(gt) sum(gt != "./."))
x=gt_tab %>% dplyr::select(-CHROM,-POS) %>% .[1,]
x
x=gt_tab %>% dplyr::select(-CHROM,-POS) %>% .[1,] %>% unlist()
x
tapply(x, sample_info$Linie, function(gt) sum(gt != "./.")) # >= minN) #%>% all()
tapply(x, sample_info$Linie, function(gt) sum(gt != "./.") >= minN) #%>% all()
tapply(x[sample_info$Linie != "DU6"],
sample_info$Linie[sample_info$Linie != "DU6"],
function(gt) sum(gt != "./.") >= minN) #%>% all()
tapply(x[sample_info$Linie == "DU6"],
sample_info$Linie[sample_info$Linie != "DU6"],
function(gt) sum(gt == "./.") >= minN) #%>% all()
tapply(x[sample_info$Linie == "DU6"],
sample_info$Linie[sample_info$Linie == "DU6"],
function(gt) sum(gt == "./.") >= minN) #%>% all()
xx <- tapply(x[sample_info$Linie != "DU6"],
sample_info$Linie[sample_info$Linie != "DU6"],
function(gt) sum(gt != "./.") >= minN) #%>% all()
yy <- tapply(x[sample_info$Linie == "DU6"],
sample_info$Linie[sample_info$Linie == "DU6"],
function(gt) sum(gt == "./.") >= minN) #%>% all()
c(xx,yy)
c(xx,yy) %>% all()
xx <- tapply(x[sample_info$Linie != "DU6"],
sample_info$Linie[sample_info$Linie != "DU6"],
function(gt) sum(gt != "./.") >= 15)
yy <- tapply(x[sample_info$Linie == "DU6"],
sample_info$Linie[sample_info$Linie == "DU6"],
function(gt) sum(gt == "./.") >= 12)
c(xx,yy)
x[sample_info$Linie == "DU6"]
View(sample_info)
x[sample_info$Linie == "DU6"]
sapply(x[sample_info$Linie == "DU6"], function(gt) sum(gt != "./.") >= 12)
x[sample_info$Linie == "DU6"]
sapply(x[sample_info$Linie == "DU6"], function(gt) sum(gt != "./.") >= 12)
xx
x[sample_info$Linie == "DU6"]
sapply(x[sample_info$Linie == "DU6"], function(gt) gt != "./.")
sapply(x[sample_info$Linie == "DU6"], function(gt) gt != "./.") %>% sum()
sapply(x[sample_info$Linie == "DU6"], function(gt) gt != "./.") %>% sum() {. >= 12}
sapply(x[sample_info$Linie == "DU6"], function(gt) gt != "./.") %>% sum() %>% {. >= 12}
yy <- sapply(x[sample_info$Linie == "DU6"], function(gt) gt != "./.") %>% sum() %>% {. >= 12}
c(xx,yy)
yy <- tapply(x[sample_info$Linie == "DU6"],
sample_info$Linie[sample_info$Linie == "DU6"],
function(gt) sum(gt != "./.") >= 12)
yy
c(xx,yy)
c(xx,yy) %>% all()
gt_tab %>%
dplyr::select(-CHROM,-POS) %>%
apply(1, function(x){
#x=gt_tab %>% dplyr::select(-CHROM,-POS) %>% .[1,] %>% unlist()
# count calls (non ./.) per group above 15 samples (except DU6)
xx <- tapply(x[sample_info$Linie != "DU6"],
sample_info$Linie[sample_info$Linie != "DU6"],
function(gt) sum(gt != "./.") >= 15)
# count calls (non ./.) per group above 12 samples (only DU6)
yy <- tapply(x[sample_info$Linie == "DU6"],
sample_info$Linie[sample_info$Linie == "DU6"],
function(gt) sum(gt != "./.") >= 12)
# if all groups pass the min N per group (15-rest or 12-DU6)
c(xx,yy) %>% all()
})
BiocInstaller::install("gdsfmt")
BiocInstaller("gdsfmt")
BiocInstaller::biocLite("gdsfmt")
BiocInstaller::biocLite("gdsfmt")
library(gdsfmt)
library(SNPRelate)
library(SNPRelate)
BiocManager::install("SNPRelate")
library(SNPRelate)
BiocManager::install("SNPRelate")
library(SNPRelate)
library(gdsfmt)
library(SNPRelate)
BiocManager::install("gdsfmt")
install.packages("ridge")
install.packages("ridge")
sessionInfo()
