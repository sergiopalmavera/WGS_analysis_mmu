mutate(Linie = factor(Linie, levels = line_lev))
# Chunk 24
nbp <- list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP") %>%
lapply(function(x) read.table(file.path(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"),x))) %>%
bind_rows()
nbp <- nbp %>%
mutate(file = list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP")) %>%
rename(tot_bp = V1) %>%
dplyr::select(file, tot_bp) %>%
mutate(file = str_remove(file, ".NBP"))
# Chunk 25
qc_fastp_stats <- left_join(qc_fastp_stats, nbp, by = c("sample" = "file"))
qc_fastp_stats <- qc_fastp_stats %>%
dplyr::select(-tot_bp.x) %>%
rename(tot_bp = tot_bp.y)
head(qc_fastp_stats)
dim(qc_fastp_stats)
# Chunk 26
qc_raw_stats %>% filter(sample_name == "I34772")
qc_raw_stats <- qc_raw_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001","I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001", "I34772_dropout", sample_name))
qc_raw_stats %>% filter(grepl("I34772", sample_name))
# Chunk 27
qc_fastp_stats %>% filter(sample_name == "I34772")
qc_fastp_stats <- qc_fastp_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_fastp_stats %>% filter(grepl("I34772", sample_name))
# Chunk 28
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot.seq") %>%
apply(1, function(x) x[3]==x[4]) %>% all()
# Chunk 32
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
group_by(Linie) %>%
summarise(n_below_5x = sum(avg_cvg < 5))
# Chunk 33
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
filter(avg_cvg < 5)
# Chunk 34
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot.seq") %>%
apply(1, function(x) x[3]==x[4]) %>% all()
# Chunk 37
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
group_by(Linie) %>%
summarise(n_below_5x = sum(avg_cvg < 5))
# Chunk 38
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
filter(avg_cvg < 5)
# Chunk 39
qc_raw_stats %>% summarise(mean(pct.gc))
qc_fastp_stats %>% summarise(mean(pct.gc))
# Chunk 40
qc_raw_stats %>% summarise(mean(pct.dup))
qc_fastp_stats %>% summarise(mean(pct.dup))
qc_raw_stats_avg_cvg <- qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
dplyr::select(-R1,-R2,-tot_bp)
qc_fastp_stats_avg_cvg <- qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
dplyr::select(-R1,-R2,-tot_bp)
qc_raw_stats_avg_cvg
qc_fastp_stats_avg_cvg
qc_raw_stats_avg_cvg <- qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
dplyr::select(-R1,-R2,-tot_bp)
qc_fastp_stats_avg_cvg <- qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
dplyr::select(-R1,-R2,-tot_bp)
saveRDS(qc_raw_stats_avg_cvg, here("batch3/03_quality_control_analysis/r_objects/qc_raw_stats_avg_cvg.rds"))
saveRDS(qc_fastp_stats_avg_cvg, here("batch3/03_quality_control_analysis/r_objects/qc_fastp_stats_avg_cvg.rds"))
# Chunk 1
library(dplyr)
library(here)
library(stringr)
library(ggplot2)
library(reshape2)
library(tidyr)
# Chunk 2
sample_info <- read.csv(here("sample_info","sample_info_batch3","sample_info.csv"), header = T, stringsAsFactors = F) %>% mutate(name_short = str_remove(name, "-S1"))
sample_info$Linie[sample_info$Linie == "HLB"] <- "DUHLB"
line_lev <- c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU")
sample_info %>% head()
sample_info %>% dim()
# Chunk 3
fls <- list.files(here("batch3/06_quality_control_alignments/output"), pattern = "/*_pt1_points.txt")
cvg_summary <- lapply(fls, function(fl){
#fl=fls[1]
# Prepare sample name (taking into account droput-reseqd sample)
cond <- fl == "I34772-L1_S19_L004.sorted.RG.dedup.bqsr.CollectWgsMetrics.default_pt1_points.txt" | fl == "I34772-L1_S19_L004.sorted.RG.dedup.bqsr.CollectWgsMetrics.Q0.M0_pt1_points.txt"
if(cond){
s <- "I34772_dropout_reseqd"
}else{
s <- str_split(fl,"-") %>% sapply(function(x) x[1])
}
# Load sample histogram information
d <- read.table(file.path(here("batch3/06_quality_control_alignments/output"),fl), header = T, stringsAsFactors = F)
# Extract mode of metrics (with or without bp and mapping quality filters)
m <- str_split(fl,"_") %>% sapply(function(x) x[3]) %>%
str_remove("sorted.RG.dedup.bqsr.CollectWgsMetrics.") %>%
str_remove("L00[1-9].")
# Add sample and mode information (default = mapping and bp quality of min 20)
d <- mutate(d, sample = s, mode = m, mode = str_replace(mode, "default","Q20.M20"))
# add mouse line information
d <- dplyr::select(sample_info, Linie, name_short) %>%
right_join(d, by = c("name_short"="sample")) %>%
dplyr::rename(sample_name = name_short)
}) %>%
# bind rows
bind_rows()
head(cvg_summary)
dim(cvg_summary) #182 31
# Chunk 4
cvg_summary <- cvg_summary %>%
mutate(Linie = ifelse(sample_name == "I34772_dropout_reseqd", "DUK", Linie))
# Chunk 7
cvg_summary %>%
filter(sample_name != "I34772") %>%
group_by(mode) %>%
summarise(n(), min(MEAN_COVERAGE), mean(MEAN_COVERAGE), median(MEAN_COVERAGE),max(MEAN_COVERAGE),
sum(MEAN_COVERAGE < 5)) %>% knitr::kable()
# Chunk 8
cvg_summary %>%
filter(sample_name != "I34772") %>%
group_by(Linie,mode) %>%
summarise(n(), min(MEAN_COVERAGE), mean(MEAN_COVERAGE), median(MEAN_COVERAGE),max(MEAN_COVERAGE),
sum(MEAN_COVERAGE < 5)) %>% knitr::kable()
# Chunk 9
cvg_summary %>% filter(grepl("I34772", sample_name)) %>%
dplyr::select(Linie, sample_name, MEAN_COVERAGE)
# Chunk 10
cvg_summary <- cvg_summary %>% filter(sample_name != "I34772")
avg_cvg <- list(
aligned_Q0M0 = cvg_summary %>%
filter(mode == "Q0.M0") %>%
dplyr::select(sample_name,Linie, MEAN_COVERAGE) %>%
dplyr::rename(avg_cvg = MEAN_COVERAGE),
aligned_Q20M20 = cvg_summary %>%
filter(mode == "Q20.M20") %>%
dplyr::select(sample_name,Linie, MEAN_COVERAGE) %>%
dplyr::rename(avg_cvg = MEAN_COVERAGE),
corrected = readRDS(here("batch3/03_quality_control_analysis/r_objects/qc_fastp_stats_avg_cvg.rds")),
raw = readRDS(here("batch3/03_quality_control_analysis/r_objects/qc_raw_stats_avg_cvg.rds"))
) %>%
bind_rows(.id = "cvg_class") %>%
mutate(cvg_class = factor(cvg_class, levels = c("raw","corrected","aligned_Q0M0","aligned_Q20M20")))
head(avg_cvg)
avg_cvg$corrected %>% head()
avg_cvg$corrected
readRDS(here("batch3/03_quality_control_analysis/r_objects/qc_fastp_stats_avg_cvg.rds"))
avg_cvg
avg_cvg %>% filter(cvg_class == "corrected")
avg_cvg %>% filter(cvg_class == "corrected" & sample_name == "I34772_dropout")
avg_cvg <- avg_cvg %>%
filter(cvg_class == "corrected" & sample_name != "I34772_dropout") %>%
filter(cvg_class == "raw" & sample_name != "I34772_dropout")
avg_cvg
# Chunk 1
library(dplyr)
library(here)
library(stringr)
library(ggplot2)
library(reshape2)
library(tidyr)
# Chunk 2
sample_info <- read.csv(here("sample_info","sample_info_batch3","sample_info.csv"), header = T, stringsAsFactors = F) %>% mutate(name_short = str_remove(name, "-S1"))
sample_info$Linie[sample_info$Linie == "HLB"] <- "DUHLB"
line_lev <- c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU")
sample_info %>% head()
sample_info %>% dim()
# Chunk 3
fls <- list.files(here("batch3/06_quality_control_alignments/output"), pattern = "/*_pt1_points.txt")
cvg_summary <- lapply(fls, function(fl){
#fl=fls[1]
# Prepare sample name (taking into account droput-reseqd sample)
cond <- fl == "I34772-L1_S19_L004.sorted.RG.dedup.bqsr.CollectWgsMetrics.default_pt1_points.txt" | fl == "I34772-L1_S19_L004.sorted.RG.dedup.bqsr.CollectWgsMetrics.Q0.M0_pt1_points.txt"
if(cond){
s <- "I34772_dropout_reseqd"
}else{
s <- str_split(fl,"-") %>% sapply(function(x) x[1])
}
# Load sample histogram information
d <- read.table(file.path(here("batch3/06_quality_control_alignments/output"),fl), header = T, stringsAsFactors = F)
# Extract mode of metrics (with or without bp and mapping quality filters)
m <- str_split(fl,"_") %>% sapply(function(x) x[3]) %>%
str_remove("sorted.RG.dedup.bqsr.CollectWgsMetrics.") %>%
str_remove("L00[1-9].")
# Add sample and mode information (default = mapping and bp quality of min 20)
d <- mutate(d, sample = s, mode = m, mode = str_replace(mode, "default","Q20.M20"))
# add mouse line information
d <- dplyr::select(sample_info, Linie, name_short) %>%
right_join(d, by = c("name_short"="sample")) %>%
dplyr::rename(sample_name = name_short)
}) %>%
# bind rows
bind_rows()
head(cvg_summary)
dim(cvg_summary) #182 31
# Chunk 4
cvg_summary <- cvg_summary %>%
mutate(Linie = ifelse(sample_name == "I34772_dropout_reseqd", "DUK", Linie))
# Chunk 7
cvg_summary %>%
filter(sample_name != "I34772") %>%
group_by(mode) %>%
summarise(n(), min(MEAN_COVERAGE), mean(MEAN_COVERAGE), median(MEAN_COVERAGE),max(MEAN_COVERAGE),
sum(MEAN_COVERAGE < 5)) %>% knitr::kable()
# Chunk 8
cvg_summary %>%
filter(sample_name != "I34772") %>%
group_by(Linie,mode) %>%
summarise(n(), min(MEAN_COVERAGE), mean(MEAN_COVERAGE), median(MEAN_COVERAGE),max(MEAN_COVERAGE),
sum(MEAN_COVERAGE < 5)) %>% knitr::kable()
# Chunk 9
cvg_summary %>% filter(grepl("I34772", sample_name)) %>%
dplyr::select(Linie, sample_name, MEAN_COVERAGE)
# Chunk 10
cvg_summary <- cvg_summary %>% filter(sample_name != "I34772")
# Chunk 11
avg_cvg <- list(
aligned_Q0M0 = cvg_summary %>%
filter(mode == "Q0.M0") %>%
dplyr::select(sample_name,Linie, MEAN_COVERAGE) %>%
dplyr::rename(avg_cvg = MEAN_COVERAGE),
aligned_Q20M20 = cvg_summary %>%
filter(mode == "Q20.M20") %>%
dplyr::select(sample_name,Linie, MEAN_COVERAGE) %>%
dplyr::rename(avg_cvg = MEAN_COVERAGE),
corrected = readRDS(here("batch3/03_quality_control_analysis/r_objects/qc_fastp_stats_avg_cvg.rds")),
raw = readRDS(here("batch3/03_quality_control_analysis/r_objects/qc_raw_stats_avg_cvg.rds"))
) %>%
bind_rows(.id = "cvg_class") %>%
mutate(cvg_class = factor(cvg_class, levels = c("raw","corrected","aligned_Q0M0","aligned_Q20M20")))
head(avg_cvg)
avg_cvg %>%
filter(cvg_class == "corrected" & sample_name == "I34772_dropout")
avg_cvg %>%
filter(cvg_class == "corrected" & sample_name == "I34772_dropout") %>%
filter(cvg_class == "raw" & sample_name == "I34772_dropout")
avg_cvg
avg_cvg <- avg_cvg %>%
filter(sample_name == "I34772_dropout")
# Chunk 1
library(dplyr)
library(here)
library(stringr)
library(ggplot2)
library(reshape2)
library(tidyr)
# Chunk 2
sample_info <- read.csv(here("sample_info","sample_info_batch3","sample_info.csv"), header = T, stringsAsFactors = F) %>% mutate(name_short = str_remove(name, "-S1"))
sample_info$Linie[sample_info$Linie == "HLB"] <- "DUHLB"
line_lev <- c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU")
sample_info %>% head()
sample_info %>% dim()
# Chunk 3
fls <- list.files(here("batch3/06_quality_control_alignments/output"), pattern = "/*_pt1_points.txt")
cvg_summary <- lapply(fls, function(fl){
#fl=fls[1]
# Prepare sample name (taking into account droput-reseqd sample)
cond <- fl == "I34772-L1_S19_L004.sorted.RG.dedup.bqsr.CollectWgsMetrics.default_pt1_points.txt" | fl == "I34772-L1_S19_L004.sorted.RG.dedup.bqsr.CollectWgsMetrics.Q0.M0_pt1_points.txt"
if(cond){
s <- "I34772_dropout_reseqd"
}else{
s <- str_split(fl,"-") %>% sapply(function(x) x[1])
}
# Load sample histogram information
d <- read.table(file.path(here("batch3/06_quality_control_alignments/output"),fl), header = T, stringsAsFactors = F)
# Extract mode of metrics (with or without bp and mapping quality filters)
m <- str_split(fl,"_") %>% sapply(function(x) x[3]) %>%
str_remove("sorted.RG.dedup.bqsr.CollectWgsMetrics.") %>%
str_remove("L00[1-9].")
# Add sample and mode information (default = mapping and bp quality of min 20)
d <- mutate(d, sample = s, mode = m, mode = str_replace(mode, "default","Q20.M20"))
# add mouse line information
d <- dplyr::select(sample_info, Linie, name_short) %>%
right_join(d, by = c("name_short"="sample")) %>%
dplyr::rename(sample_name = name_short)
}) %>%
# bind rows
bind_rows()
head(cvg_summary)
dim(cvg_summary) #182 31
# Chunk 4
cvg_summary <- cvg_summary %>%
mutate(Linie = ifelse(sample_name == "I34772_dropout_reseqd", "DUK", Linie))
# Chunk 7
cvg_summary %>%
filter(sample_name != "I34772") %>%
group_by(mode) %>%
summarise(n(), min(MEAN_COVERAGE), mean(MEAN_COVERAGE), median(MEAN_COVERAGE),max(MEAN_COVERAGE),
sum(MEAN_COVERAGE < 5)) %>% knitr::kable()
# Chunk 8
cvg_summary %>%
filter(sample_name != "I34772") %>%
group_by(Linie,mode) %>%
summarise(n(), min(MEAN_COVERAGE), mean(MEAN_COVERAGE), median(MEAN_COVERAGE),max(MEAN_COVERAGE),
sum(MEAN_COVERAGE < 5)) %>% knitr::kable()
# Chunk 9
cvg_summary %>% filter(grepl("I34772", sample_name)) %>%
dplyr::select(Linie, sample_name, MEAN_COVERAGE)
# Chunk 10
cvg_summary <- cvg_summary %>% filter(sample_name != "I34772")
# Chunk 11
avg_cvg <- list(
aligned_Q0M0 = cvg_summary %>%
filter(mode == "Q0.M0") %>%
dplyr::select(sample_name,Linie, MEAN_COVERAGE) %>%
dplyr::rename(avg_cvg = MEAN_COVERAGE),
aligned_Q20M20 = cvg_summary %>%
filter(mode == "Q20.M20") %>%
dplyr::select(sample_name,Linie, MEAN_COVERAGE) %>%
dplyr::rename(avg_cvg = MEAN_COVERAGE),
corrected = readRDS(here("batch3/03_quality_control_analysis/r_objects/qc_fastp_stats_avg_cvg.rds")),
raw = readRDS(here("batch3/03_quality_control_analysis/r_objects/qc_raw_stats_avg_cvg.rds"))
) %>%
bind_rows(.id = "cvg_class") %>%
mutate(cvg_class = factor(cvg_class, levels = c("raw","corrected","aligned_Q0M0","aligned_Q20M20")))
head(avg_cvg)
avg_cvg %>%
filter(sample_name == "I34772_dropout")
avg_cvg <- avg_cvg %>%
filter(sample_name != "I34772_dropout")
global_cvg <- avg_cvg %>%
group_by(cvg_class) %>%
summarise(mean = mean(avg_cvg))
global_cvg
global_cvg <- avg_cvg %>%
group_by(cvg_class) %>%
summarise(mean = mean(avg_cvg))
global_cvg %>% knitr::kable()
png(here("batch3/06_quality_control_alignments/figures/avg_cvg_by_class.png"),res = 300, units = "px", height = 2000, width = 2000)
ggplot(data = avg_cvg, aes(x = Linie, y = avg_cvg)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~cvg_class, nrow=1) +
geom_hline(data = global_cvg, aes(yintercept = mean), color = "red", linetype = "dotted") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab(NULL)
dev.off()
cols <- names(cvg_summary)[grep("^PCT_[[:digit:]]",names(cvg_summary))] # get cols with cvg
names(cvg_summary)
dim(cvg_summary)
bks <- str_remove(cols, "PCT_") %>% str_remove("X")
png(here("batch3/06_quality_control_alignments/figures/min_cvg_genome_pct.png"),res = 300, units = "px", height = 2000, width = 2000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
mutate(value = as.numeric(value),
cvg = str_remove(as.character(variable), "PCT_"),
cvg = str_remove(cvg, "X"),
cvg = as.numeric(cvg)) %>%
filter(cvg <= 20) %>%
ggplot(aes(x = cvg, y = value, color = sample_name, group = sample_name)) +
geom_line() +
facet_grid(Linie ~ mode) +
theme(legend.position = "none") +
geom_vline(xintercept = 5, color = "red", linetype = "dotdash") +
scale_x_continuous(breaks = 1:20)
dev.off()
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
group_by(mode) %>%
summarise(n(), min(value), mean(value), median(value), max(value))
fls <- list.files(here("batch3/06_quality_control_alignments/output"), pattern = "CollectWgsMetrics") %>%
.[grep("_pt2",.)]
hist_dat <- lapply(fls, function(fl){
# Prepare sample name
s <- str_split(fl,"-") %>% sapply(function(x) x[1])
# Load sample histogram information
d <- read.table(file.path(here("batch3/06_quality_control_alignments/output"),fl), header = T)
# Extract mode of metrics (with or without bp and mapping quality filters)
m <- str_split(fl,"_") %>% sapply(function(x) x[3]) %>%
str_remove("sorted.RG.dedup.bqsr.CollectWgsMetrics.") %>%
str_remove("L00[1-9].")
# Add sample and mode information (default = mapping and bp quality of min 20)
d <- mutate(d, sample = s, mode = m, mode = str_replace(mode, "default","Q20.M20"))
# add mouse line information
d <- dplyr::select(sample_info, Linie, name_short) %>%
right_join(d, by = c("name_short"="sample")) %>%
dplyr::rename(sample_name = name_short)
# Add probability and cummulative mass
d <- d %>% mutate(prob = high_quality_coverage_count/sum(high_quality_coverage_count),
cum_mass = cumsum(prob))
# change count variable name
d <- d %>% rename(cvg_count = high_quality_coverage_count)
}) %>%
# bind rows
bind_rows()
dim(hist_dat) #45180     6
head(hist_dat)
pct_prop_paired <- read.table(here("batch3/06_quality_control_alignments/output/flagstat_pct_properly_paired_reads.tab"))
names(pct_prop_paired) <- c("sample_name","pct")
pct_prop_paired <- pct_prop_paired %>% left_join(sample_info, by = c("sample_name"="name_short"))
pct_prop_paired <- pct_prop_paired %>% dplyr::select(Linie,sample_name, pct)
head(pct_prop_paired)
png(here("batch3/06_quality_control_alignments/figures/pct_properly_paired_reads.png"),
res = 300, units = "px", height = 1000, width = 3500)
ggplot(pct_prop_paired, aes(x=sample_name, y = pct, fill = Linie)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = 100, linetype = "dotted", color = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_continuous(breaks = seq(0,100,5)) +
ggtitle("Percentage of properly paired reads") +
xlab(NULL)
dev.off()
pct_prop_paired %>% summarise(mean(pct > 90), min(pct))
pct_prop_paired %>% filter(pct == min(pct_prop_paired$pct))
pct_prop_paired %>% summarise(mean(pct > 90), min(pct))
pct_prop_paired %>% filter(pct == min(pct_prop_paired$pct))
pct_prop_paired %>% summarise(mean(pct > 90), min(pct))
pct_prop_paired %>% filter(pct == min(pct_prop_paired$pct))
fls <- list.files(here("batch3/06_quality_control_alignments/output"), pattern = "CollectInsertSizeMetrics_pt1.txt")
insert_size_summary <- lapply(fls, function(fl){
#fl=fls[1]
# Prepare sample name
s <- str_split(fl,"-") %>% sapply(function(x) x[1])
# Load sample histogram information
d <- read.delim(file.path(here("batch3/06_quality_control_alignments/output"),fl),
header = T, stringsAsFactors = F, comment.char = "#")
# Add sample and mode information (default = mapping and bp quality of min 20)
d <- mutate(d, sample = s)
# add mouse line information
d <- dplyr::select(sample_info, Linie, name_short) %>%
right_join(d, by = c("name_short"="sample")) %>%
dplyr::rename(sample_name = name_short)
}) %>%
# bind rows
bind_rows()
head(insert_size_summary)
dim(insert_size_summary) #90 25
png(here("batch3/06_quality_control_alignments/figures/insert_size_mean.png"),
res = 300, units = "px", height = 1000, width = 3500)
ggplot(insert_size_summary, aes(x=sample_name, y = MEAN_INSERT_SIZE, fill = Linie)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = MEAN_INSERT_SIZE-STANDARD_DEVIATION,
ymax = MEAN_INSERT_SIZE+STANDARD_DEVIATION), width = 0.2, alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
xlab(NULL) +
ggtitle("Mean Insert Size per sample (+/- sd)")
dev.off()
fls
fls <- list.files(here("batch3/06_quality_control_alignments/output"), pattern = "CollectInsertSizeMetrics_pt1.txt")
insert_size_summary <- lapply(fls, function(fl){
#fl=fls[1]
# Prepare sample name
cond <- fl == "I34772-L1_S19_L004.sorted.RG.dedup.bqsr.CollectInsertSizeMetrics_pt1.txt"
if(cond){
s <- "I34772_dropout_reseqd"
}else{
s <- str_split(fl,"-") %>% sapply(function(x) x[1])
}
# Load sample histogram information
d <- read.delim(file.path(here("batch3/06_quality_control_alignments/output"),fl),
header = T, stringsAsFactors = F, comment.char = "#")
# Add sample and mode information (default = mapping and bp quality of min 20)
d <- mutate(d, sample = s)
# add mouse line information
d <- dplyr::select(sample_info, Linie, name_short) %>%
right_join(d, by = c("name_short"="sample")) %>%
dplyr::rename(sample_name = name_short)
}) %>%
# bind rows
bind_rows()
head(insert_size_summary)
dim(insert_size_summary) #90 25
png(here("batch3/06_quality_control_alignments/figures/insert_size_mean.png"),
res = 300, units = "px", height = 1000, width = 3500)
ggplot(insert_size_summary, aes(x=sample_name, y = MEAN_INSERT_SIZE, fill = Linie)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = MEAN_INSERT_SIZE-STANDARD_DEVIATION,
ymax = MEAN_INSERT_SIZE+STANDARD_DEVIATION), width = 0.2, alpha = 0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
xlab(NULL) +
ggtitle("Mean Insert Size per sample (+/- sd)")
dev.off()
setwd("/projekte/I2-SOS-FERT/GitHub/WGS_analysis_mmu/reference_genome_ensembl/unmasked_intervals")
library(GenomicRanges)
list.files()
tab <- read.table("intervals_unmasked.bed", header = F)
tab
gr <- GRanges(seqnames = tab$V1, IRanges(start = tab$V2, end = tab$V3))
gr
width(gr)
library(dplyr)
width(gr) %>% range()
width(gr) %>% max()
pwd()
getwd()
getwd()
list.files()
