rownames(tmp) <- rownm_tmp
png(here("batch3/03_quality_control_analysis/figures/modules_R1_files.png"),
width = 2000, height = 1500, units = "px", res = 300)
pheatmap(qc_module_status_ma[,grep("R1",names(qc_module_status_ma))],
main = "Module status R1 fastq files\n(PASS=2 / WARN=1 / FAIL=0)",
annotation_col = tmp,
cluster_rows = F,
cluster_cols = F,
show_colnames = F)
dev.off()
rownm_tmp <- rownames(col_data)[col_data$read_info == "R2"] # need to adjust coldata
tmp <- filter(col_data, read_info == "R2")
rownames(tmp) <- rownm_tmp
png(here("batch3/03_quality_control_analysis/figures/modules_R2_files.png"),
width = 2000, height = 1500, units = "px", res = 300)
pheatmap(qc_module_status_ma[,grep("R2",names(qc_module_status_ma))],
main = "Module status R2 fastq files\n(PASS=2 / WARN=1 / FAIL=0)",
annotation_col = tmp,
cluster_rows = F,
cluster_cols = F,
show_colnames = F)
dev.off()
qc_module_status_ma[,grep("R2",names(qc_module_status_ma))][1:5,1:5]
qc_module_status_ma[,grep("R2",names(qc_module_status_ma))] %>% dim()
qc_raw_stats <- qc_raw_stats %>%
mutate(tot.seq = as.numeric(tot.seq),
seq.length = as.numeric(seq.length),
tot_bp = tot.seq * seq.length,
read_type = str_split(sample,"_") %>% sapply(function(x) x[4]),
sample_name = str_split(sample,"_") %>% sapply(function(x) x[1]),
sample_name = str_remove(sample_name, "-L1")) %>%
left_join(dplyr::select(sample_info, name_short, Linie),
by = c("sample_name"="name_short")) %>%
mutate(Linie = factor(Linie, levels = line_lev))
qc_fastp_stats <- qc_fastp_stats %>%
mutate(tot.seq = as.numeric(tot.seq),
seq.length = as.numeric(seq.length),
tot_bp = tot.seq * seq.length,
read_type = str_split(sample,"_") %>% sapply(function(x) x[4]),
sample_name = str_split(sample,"_") %>% sapply(function(x) x[1]),
sample_name = str_remove(sample_name, "-L1")) %>%
left_join(dplyr::select(sample_info, name_short, Linie),
by = c("sample_name"="name_short")) %>%
mutate(Linie = factor(Linie, levels = line_lev))
class(qc_fastp_stats)
dim(qc_fastp_stats)
ls()
nbp <- list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP") %>%
lapply(function(x) read.table(file.path(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"),x))) %>%
bind_rows()
nbp <- nbp %>%
mutate(file = list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP")) %>%
rename(tot_bp = V1) %>%
dplyr::select(file, tot_bp) %>%
mutate(file = str_remove(file, ".NBP"))
qc_fastp_stats <- left_join(qc_fastp_stats, nbp, by = c("sample" = "file"))
qc_fastp_stats <- qc_fastp_stats %>%
dplyr::select(-tot_bp.x) %>%
rename(tot_bp = tot_bp.y)
head(qc_fastp_stats)
dim(qc_fastp_stats)
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot.seq") %>%
apply(1, function(x) x[3]==x[4]) %>% all()
png("./batch3/03_quality_control_analysis/figures/n_read_pairs_raw_fastq.png",
height = 2500, width = 4000, units = "px", res = 300)
qc_raw_stats %>%
filter(read_type == "R1") %>%
ggplot(aes(x = sample_name, y = tot.seq/1e6, fill = Linie)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("N Read Pairs (in mill)") +
ggtitle("Number of read pairs in million in raw fastq files")
dev.off()
dim(qc_raw_stats)
head(qc_raw_stats)
qc_fastp_stats %>% filter(sample_name == "I34772")
qc_fastp_stats %>%
mutate(
sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected" & sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name)
)
qc_fastp_stats %>%
filter(sample_name == "I34772")
qc_fastp_stats %>%
filter(sample_name == "I34772") %>%
mutate(
sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected" & sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name)
)
qc_fastp_stats %>%
filter(sample_name == "I34772") %>%
mutate(
sample_name = ifelse(
sample == "I34772-L1_S19_L004_R1_001.corrected" & sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name)
)
qc_fastp_stats %>%
filter(sample_name == "I34772") %>%
mutate(
sample_name = ifelse(
sample == "I34772-L1_S19_L004_R1_001.corrected" & sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name)
)
qc_fastp_stats %>%
filter(sample_name == "I34772") %>%
mutate(
sample_name = ifelse(
sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name)
)
qc_fastp_stats %>%
filter(sample_name == "I34772") %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name))
qc_fastp_stats %>%
filter(sample_name == "I34772") %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name))
qc_fastp_stats %>%
filter(sample_name == "I34772") %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_fastp_stats <- qc_fastp_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_fastp_stats %>% filter(sample_name == "I34772")
# Chunk 1
library(dplyr)
library(ggplot2)
library(fastqcr)
library(here)
library(reshape2)
library(stringr)
library(pheatmap)
# Chunk 2
sample_info <- read.csv(here("sample_info","sample_info_batch3","sample_info.csv"), header = T, stringsAsFactors = F) %>% mutate(name_short = str_remove(name, "-S1"))
sample_info$Linie[sample_info$Linie == "HLB"] <- "DUHLB"
line_lev <- c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU")
sample_info %>% head()
sample_info %>% dim()
# Chunk 3
genome_length <- 	2730871774
# Chunk 4
qc_raw_aggr <- qc_aggregate(here("batch3","01_quality_control","output"), progressbar = F)
qc_raw_stats <- qc_stats(qc_raw_aggr)
# Chunk 5
qc_fastp_aggr <- qc_aggregate(here("batch3","02_quality_trimming_adapter_removal","output_fastqc"), progressbar = F)
qc_fastp_stats <- qc_stats(qc_fastp_aggr)
# Chunk 6
qc_raw_stats %>% nrow()
qc_fastp_stats %>% nrow()
# Chunk 7
summary(qc_raw_aggr)
# Chunk 8
summary(qc_fastp_aggr)
# Chunk 9
qc_raw_aggr$status_recoded[qc_raw_aggr$status == "PASS"] <- 2L
qc_raw_aggr$status_recoded[qc_raw_aggr$status == "WARN"] <- 1L
qc_raw_aggr$status_recoded[qc_raw_aggr$status == "FAIL"] <- 0L
qc_raw_aggr_wide <- qc_raw_aggr %>%
dplyr::select(module,sample,status_recoded) %>%
dcast(module ~ sample, value.var = "status_recoded")
qc_raw_aggr_wide %>% dim()
qc_raw_aggr_wide[1:5,1:5]
# Chunk 10
qc_fastp_aggr$status_recoded[qc_fastp_aggr$status == "PASS"] <- 2L
qc_fastp_aggr$status_recoded[qc_fastp_aggr$status == "WARN"] <- 1L
qc_fastp_aggr$status_recoded[qc_fastp_aggr$status == "FAIL"] <- 0L
qc_fastp_aggr_wide <- qc_fastp_aggr %>%
dplyr::select(module,sample,status_recoded) %>%
dcast(module ~ sample, value.var = "status_recoded")
qc_fastp_aggr_wide %>% dim()
qc_fastp_aggr_wide[1:5,1:5]
# Chunk 11
qc_module_status_ma <- left_join(qc_raw_aggr_wide, qc_fastp_aggr_wide, by = "module")
qc_module_status_ma %>% dim()
# Chunk 12
rownames(qc_module_status_ma) <- qc_module_status_ma$module %>% str_replace_all(pattern = " ","_")
qc_module_status_ma$module <- NULL
qc_module_status_ma %>% dim()
# Chunk 13
samp_nm <- names(qc_module_status_ma) %>% str_split("-") %>% sapply(function(x) x[1])
# Chunk 14
read_info <- names(qc_module_status_ma) %>% str_split("_") %>% sapply(function(x) x[4])
# Chunk 15
qc_stage <- names(qc_module_status_ma) %>% str_split("[.]") %>% sapply(function(x) x[2])
qc_stage[is.na(qc_stage)] <- "raw"
qc_stage[qc_stage == "corrected"] <- "after_fastp"
# Chunk 16
col_data <- data.frame(read_info = read_info, qc_stage = qc_stage)
rownames(col_data) <- names(qc_module_status_ma)
# Chunk 22
qc_raw_stats <- qc_raw_stats %>%
mutate(tot.seq = as.numeric(tot.seq),
seq.length = as.numeric(seq.length),
tot_bp = tot.seq * seq.length,
read_type = str_split(sample,"_") %>% sapply(function(x) x[4]),
sample_name = str_split(sample,"_") %>% sapply(function(x) x[1]),
sample_name = str_remove(sample_name, "-L1")) %>%
left_join(dplyr::select(sample_info, name_short, Linie),
by = c("sample_name"="name_short")) %>%
mutate(Linie = factor(Linie, levels = line_lev))
# Chunk 23
qc_fastp_stats <- qc_fastp_stats %>%
mutate(tot.seq = as.numeric(tot.seq),
seq.length = as.numeric(seq.length),
tot_bp = tot.seq * seq.length,
read_type = str_split(sample,"_") %>% sapply(function(x) x[4]),
sample_name = str_split(sample,"_") %>% sapply(function(x) x[1]),
sample_name = str_remove(sample_name, "-L1")) %>%
left_join(dplyr::select(sample_info, name_short, Linie),
by = c("sample_name"="name_short")) %>%
mutate(Linie = factor(Linie, levels = line_lev))
# Chunk 24
nbp <- list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP") %>%
lapply(function(x) read.table(file.path(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"),x))) %>%
bind_rows()
nbp <- nbp %>%
mutate(file = list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP")) %>%
rename(tot_bp = V1) %>%
dplyr::select(file, tot_bp) %>%
mutate(file = str_remove(file, ".NBP"))
# Chunk 25
qc_fastp_stats <- left_join(qc_fastp_stats, nbp, by = c("sample" = "file"))
qc_fastp_stats <- qc_fastp_stats %>%
dplyr::select(-tot_bp.x) %>%
rename(tot_bp = tot_bp.y)
head(qc_fastp_stats)
dim(qc_fastp_stats)
# Chunk 26
qc_fastp_stats %>% filter(sample_name == "I34772")
qc_fastp_stats %>% filter(sample_name == "I34772")
qc_fastp_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_fastp_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))%>%
filter(sample_name == "I34772")
qc_fastp_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))%>%
filter(sample_name == "I34772*")
qc_fastp_stats %>% filter(sample_name == "I34772")
qc_fastp_stats <- qc_fastp_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_fastp_stats %>% filter(grepl("I34772", sample_name))
qc_raw_stats <- qc_raw_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_raw_stats %>% filter(grepl("I34772", sample_name))
# Chunk 1
library(dplyr)
library(ggplot2)
library(fastqcr)
library(here)
library(reshape2)
library(stringr)
library(pheatmap)
# Chunk 2
sample_info <- read.csv(here("sample_info","sample_info_batch3","sample_info.csv"), header = T, stringsAsFactors = F) %>% mutate(name_short = str_remove(name, "-S1"))
sample_info$Linie[sample_info$Linie == "HLB"] <- "DUHLB"
line_lev <- c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU")
sample_info %>% head()
sample_info %>% dim()
# Chunk 3
genome_length <- 	2730871774
# Chunk 4
qc_raw_aggr <- qc_aggregate(here("batch3","01_quality_control","output"), progressbar = F)
qc_raw_stats <- qc_stats(qc_raw_aggr)
# Chunk 5
qc_fastp_aggr <- qc_aggregate(here("batch3","02_quality_trimming_adapter_removal","output_fastqc"), progressbar = F)
qc_fastp_stats <- qc_stats(qc_fastp_aggr)
# Chunk 6
qc_raw_stats %>% nrow()
qc_fastp_stats %>% nrow()
# Chunk 7
summary(qc_raw_aggr)
# Chunk 8
summary(qc_fastp_aggr)
# Chunk 9
qc_raw_aggr$status_recoded[qc_raw_aggr$status == "PASS"] <- 2L
qc_raw_aggr$status_recoded[qc_raw_aggr$status == "WARN"] <- 1L
qc_raw_aggr$status_recoded[qc_raw_aggr$status == "FAIL"] <- 0L
qc_raw_aggr_wide <- qc_raw_aggr %>%
dplyr::select(module,sample,status_recoded) %>%
dcast(module ~ sample, value.var = "status_recoded")
qc_raw_aggr_wide %>% dim()
qc_raw_aggr_wide[1:5,1:5]
# Chunk 10
qc_fastp_aggr$status_recoded[qc_fastp_aggr$status == "PASS"] <- 2L
qc_fastp_aggr$status_recoded[qc_fastp_aggr$status == "WARN"] <- 1L
qc_fastp_aggr$status_recoded[qc_fastp_aggr$status == "FAIL"] <- 0L
qc_fastp_aggr_wide <- qc_fastp_aggr %>%
dplyr::select(module,sample,status_recoded) %>%
dcast(module ~ sample, value.var = "status_recoded")
qc_fastp_aggr_wide %>% dim()
qc_fastp_aggr_wide[1:5,1:5]
# Chunk 11
qc_module_status_ma <- left_join(qc_raw_aggr_wide, qc_fastp_aggr_wide, by = "module")
qc_module_status_ma %>% dim()
# Chunk 12
rownames(qc_module_status_ma) <- qc_module_status_ma$module %>% str_replace_all(pattern = " ","_")
qc_module_status_ma$module <- NULL
qc_module_status_ma %>% dim()
# Chunk 13
samp_nm <- names(qc_module_status_ma) %>% str_split("-") %>% sapply(function(x) x[1])
# Chunk 14
read_info <- names(qc_module_status_ma) %>% str_split("_") %>% sapply(function(x) x[4])
# Chunk 15
qc_stage <- names(qc_module_status_ma) %>% str_split("[.]") %>% sapply(function(x) x[2])
qc_stage[is.na(qc_stage)] <- "raw"
qc_stage[qc_stage == "corrected"] <- "after_fastp"
# Chunk 16
col_data <- data.frame(read_info = read_info, qc_stage = qc_stage)
rownames(col_data) <- names(qc_module_status_ma)
# Chunk 22
qc_raw_stats <- qc_raw_stats %>%
mutate(tot.seq = as.numeric(tot.seq),
seq.length = as.numeric(seq.length),
tot_bp = tot.seq * seq.length,
read_type = str_split(sample,"_") %>% sapply(function(x) x[4]),
sample_name = str_split(sample,"_") %>% sapply(function(x) x[1]),
sample_name = str_remove(sample_name, "-L1")) %>%
left_join(dplyr::select(sample_info, name_short, Linie),
by = c("sample_name"="name_short")) %>%
mutate(Linie = factor(Linie, levels = line_lev))
# Chunk 23
qc_fastp_stats <- qc_fastp_stats %>%
mutate(tot.seq = as.numeric(tot.seq),
seq.length = as.numeric(seq.length),
tot_bp = tot.seq * seq.length,
read_type = str_split(sample,"_") %>% sapply(function(x) x[4]),
sample_name = str_split(sample,"_") %>% sapply(function(x) x[1]),
sample_name = str_remove(sample_name, "-L1")) %>%
left_join(dplyr::select(sample_info, name_short, Linie),
by = c("sample_name"="name_short")) %>%
mutate(Linie = factor(Linie, levels = line_lev))
# Chunk 24
nbp <- list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP") %>%
lapply(function(x) read.table(file.path(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"),x))) %>%
bind_rows()
nbp <- nbp %>%
mutate(file = list.files(here("batch3/02_quality_trimming_adapter_removal/output_n_bp"), pattern = ".NBP")) %>%
rename(tot_bp = V1) %>%
dplyr::select(file, tot_bp) %>%
mutate(file = str_remove(file, ".NBP"))
# Chunk 25
qc_fastp_stats <- left_join(qc_fastp_stats, nbp, by = c("sample" = "file"))
qc_fastp_stats <- qc_fastp_stats %>%
dplyr::select(-tot_bp.x) %>%
rename(tot_bp = tot_bp.y)
head(qc_fastp_stats)
dim(qc_fastp_stats)
qc_raw_stats %>% filter(sample_name == "I34772")
qc_raw_stats %>% filter(sample_name == "I34772") %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_raw_stats %>% filter(sample_name == "I34772") %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001","I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001", "I34772_dropout", sample_name))
qc_raw_stats %>% filter(sample_name == "I34772")
qc_raw_stats <- qc_raw_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001","I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001", "I34772_dropout", sample_name))
qc_raw_stats %>% filter(grepl("I34772", sample_name))
qc_fastp_stats %>% filter(grepl("I34772", sample_name))
qc_fastp_stats %>% filter(sample_name == "I34772")
qc_fastp_stats <- qc_fastp_stats %>%
mutate(sample_name = ifelse(sample == "I34772-L1_S19_L004_R1_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S19_L004_R2_001.corrected", "I34772_dropout_reseq", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R1_001.corrected", "I34772_dropout", sample_name),
sample_name = ifelse(sample == "I34772-L1_S63_L003_R2_001.corrected", "I34772_dropout", sample_name))
qc_fastp_stats %>% filter(grepl("I34772", sample_name))
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot.seq") %>%
apply(1, function(x) x[3]==x[4]) %>% all()
png("./batch3/03_quality_control_analysis/figures/n_read_pairs_raw_fastq.png",
height = 2500, width = 4000, units = "px", res = 300)
qc_raw_stats %>%
filter(read_type == "R1") %>%
ggplot(aes(x = sample_name, y = tot.seq/1e6, fill = Linie)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("N Read Pairs (in mill)") +
ggtitle("Number of read pairs in million in raw fastq files")
dev.off()
png("./batch3/03_quality_control_analysis/figures/n_reads_raw_fastq.png",
height = 2500, width = 4000, units = "px", res = 300)
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot.seq") %>%
mutate(tot_reads_samp = R1 + R2) %>%
ggplot(aes(x = sample_name, y = tot_reads_samp, fill = Linie)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("total read per sample (in mill)") +
ggtitle("Number of reads in million in raw fastq files")
dev.off()
png("./batch3/03_quality_control_analysis/figures/avg_cvg_raw_fastq.png",
height = 2500, width = 4000, units = "px", res = 300)
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>% head()
ggplot(aes(x = sample_name, y = avg_cvg, fill = Linie)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("Average Genome Coverage per sample") +
ggtitle("Average Genome Coverage per sample from raw fastq files") +
geom_hline(yintercept = 5, color = "red", linetype = "dashed")
dev.off()
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp")
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length)
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length)
png("./batch3/03_quality_control_analysis/figures/avg_cvg_raw_fastq.png",
height = 2500, width = 4000, units = "px", res = 300)
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
ggplot(aes(x = sample_name, y = avg_cvg, fill = Linie)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("Average Genome Coverage per sample") +
ggtitle("Average Genome Coverage per sample from raw fastq files") +
geom_hline(yintercept = 5, color = "red", linetype = "dashed")
dev.off()
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
group_by(Linie) %>%
summarise(n_below_5x = sum(avg_cvg < 5))
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
filter(avg_cvg < 5)
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot.seq") %>%
apply(1, function(x) x[3]==x[4]) %>% all()
png("./batch3/03_quality_control_analysis/figures/n_read_pairs_corrected_fastq.png",
height = 2500, width = 4000, units = "px", res = 300)
qc_fastp_stats %>%
filter(read_type == "R1") %>%
ggplot(aes(x = sample_name, y = tot.seq/1e6, fill = Linie)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("N Read Pairs (in mill)") +
ggtitle("Number of read pairs in million in corrected fastq files")
dev.off()
png("./batch3/03_quality_control_analysis/figures/avg_cvg_corrected_fastq.png",
height = 2500, width = 4000, units = "px", res = 300)
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
ggplot(aes(x = sample_name, y = avg_cvg, fill = Linie)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("Average Genome Coverage per sample") +
ggtitle("Average Genome Coverage per sample from corrected fastq files") +
geom_hline(yintercept = 5, color = "red", linetype = "dashed")
dev.off()
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
group_by(Linie) %>%
summarise(n_below_5x = sum(avg_cvg < 5))
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
filter(avg_cvg < 5)
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
filter(avg_cvg < 5)
qc_raw_stats %>% summarise(mean(pct.gc))
qc_fastp_stats %>% summarise(mean(pct.gc))
qc_raw_stats %>% summarise(mean(pct.dup))
qc_fastp_stats %>% summarise(mean(pct.dup))
pwd()
getwd()
getwd() %>% writeClipboard()
getwd() %>% writeClipboard
getwd() %>% writeClipboard()
qc_fastp_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
filter(avg_cvg < 5)
qc_raw_stats %>%
dcast(sample_name+Linie ~ read_type, value.var = "tot_bp") %>%
mutate(tot_bp = R1 + R2, avg_cvg = tot_bp/genome_length) %>%
filter(avg_cvg < 5)
