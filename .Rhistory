geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode)
png(here("batch3/06_quality_control_alignments/figures/test.png"),res = 300, units = "px", height = 2000, width = 3000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
ggplot(aes(value, Linie)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode)
dev.off()
png(here("batch3/06_quality_control_alignments/figures/test.png"),res = 300, units = "px", height = 2000, width = 3000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
ggplot(aes(Linie, value)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode)
dev.off()
cvg_summary$Linie <- factor(avg_cvg$Linie, levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
png(here("batch3/06_quality_control_alignments/figures/test.png"),res = 300, units = "px", height = 2000, width = 3000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
ggplot(aes(Linie, value)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode)
dev.off()
cvg_summary$Linie <- factor(cvg_summary$Linie, levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
png(here("batch3/06_quality_control_alignments/figures/test.png"),res = 300, units = "px", height = 2000, width = 3000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
ggplot(aes(Linie, value)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode)
dev.off()
cvg_summary$Linie <- factor(cvg_summary$Linie,
levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
png(here("batch3/06_quality_control_alignments/figures/pct_territory_min_5x.png"),res = 300, units = "px", height = 2000, width = 3000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
ggplot(aes(Linie, value)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode)
dev.off()
cvg_summary$Linie <- factor(cvg_summary$Linie,
levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
png(here("batch3/06_quality_control_alignments/figures/pct_territory_min_5x.png"),res = 300, units = "px", height = 2000, width = 3000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
ggplot(aes(Linie, value*100)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode) +
xlab("Percentage Genome") +
ggtitle("Percentage Genome Covered at least 5x")
dev.off()
cvg_summary$Linie <- factor(cvg_summary$Linie,
levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
png(here("batch3/06_quality_control_alignments/figures/pct_territory_min_5x.png"),res = 300, units = "px", height = 2000, width = 3000)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
ggplot(aes(Linie, value*100)) +
geom_violin() +
geom_jitter(width = 0.05, alpha = 0.5) +
geom_boxplot(alpha = 0.2, width = 0.3, outlier.shape = NA) +
facet_wrap(~mode) +
ylab("Percentage Genome") +
xlab(NULL) +
ggtitle("Percentage Genome Covered at least 5x")
dev.off()
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
group_by(mode) %>%
summarise(n(), min(value), mean(value), median(value), max(value)) %>%
knitr::kable()
cvg_summary$Linie <- factor(cvg_summary$Linie,
levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
group_by(mode) %>%
summarise(n(), min(value), mean(value), median(value), max(value)) %>%
knitr::kable(digits = 2)
cvg_summary$Linie <- factor(cvg_summary$Linie,
levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
group_by(mode, Linie) %>%
summarise(n=n(), min(value), mean(value), median(value), max(value)) %>%
knitr::kable(digits = 2)
cvg_summary$Linie <- factor(cvg_summary$Linie,
levels = c("DUK","DUC","DU6","DU6P","DUHLB","FZTDU"))
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
group_by(mode, Linie) %>%
summarise(n=n(), min=min(value), mean=mean(value), median=median(value), max=max(value)) %>%
knitr::kable(digits = 2)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
group_by(mode) %>%
summarise(n=n(), min=min(value), mean=mean(value), median=median(value), max=max(value)) %>%
knitr::kable(digits = 2)
cvg_summary %>%
dplyr::select(mode, Linie, sample_name, cols) %>%
melt(id.vars = c("mode", "Linie","sample_name")) %>%
filter(variable == "PCT_5X") %>%
group_by(mode, Linie) %>%
summarise(n=n(), min=min(value), mean=mean(value), median=median(value), max=max(value)) %>%
knitr::kable(digits = 2)
# Chunk 1
library(dplyr)
library(ggplot2)
library(reshape2)
library(here)
# Chunk 2
make_faceted_genomewide_manhattan <- function(dat, # the data set
chrs, # chromosomes to keep
scores_var, # value variable
probs1=0.95, # quatile considered outlier
probs2=0.99,
probs3=0.999,
facets, #faceting variable (i.e. contrasts)
chr_var, # chromosome variable name (i.e. CHROM)
start_var, # start position (i.e. BIN_START)
end_var, # end position (i.e. BIN_END)
ttle
){
require(dplyr)
require(ggplot2)
require(reshape2)
# Redefine variable names for compatibility with dplyr
names(dat)[names(dat) == scores_var] <- "scores_var"
#names(dat)[names(dat) == label_var] <- "label_var"
names(dat)[names(dat) == chr_var] <- "chr_var"
names(dat)[names(dat) == start_var] <- "start_var"
names(dat)[names(dat) == end_var] <- "end_var"
if(!is.na(facets)) names(dat)[names(dat) == facets] <- "facets"
# Add genomic index
d <- dat %>%
ungroup() %>% # in case there is any grouping
dplyr::select(chr_var, start_var, end_var) %>% # get coordinates
unique() %>% # unique coordinates
filter(chr_var %in% chrs) %>% # keep desired chrs
mutate(chr_var = factor(chr_var, levels = chrs)) %>%
arrange(chr_var, start_var, end_var) %>% # arrange so that chrs go from 1 to n (human order)
mutate(genomic_index = 1:nrow(.)) %>% # add genomic index
left_join(dat, by = c("chr_var","start_var","end_var")) %>%  # merge with data
mutate(chr_var = factor(chr_var, levels = chrs))
# Find chr center
chr_center <- d %>%
group_by(chr_var) %>%
summarise(min=min(genomic_index), max=max(genomic_index), center = min+((max-min)/2)) %>%
mutate(chr_var = factor(chr_var, levels = chrs))
# Prepare thresholds
if(!is.na(facets)){
thr <- d %>%
group_by(facets) %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2),thr3 = quantile(scores_var, probs3))
}else{
thr <- d %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2), thr3 = quantile(scores_var, probs3))
}
# Define colors for chromosomes
len <- length(unique(d$chr_var))
chr_color <- vector(mode = "character", length = len)
chr_color[seq(1,len, 2)] <- "black"
chr_color[seq(2,len, 2)] <- "darkgrey"
# base plot
p <- ggplot(data = d, aes(x = genomic_index, y = scores_var, color = chr_var)) +
geom_point(alpha = 0.5, show.legend = F) +
scale_color_manual(values = chr_color) +
geom_hline(data = thr, aes(yintercept = thr1), color = "purple", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr2), color = "red", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr3), color = "blue", linetype = "dotdash", size = 1) +
scale_x_continuous(breaks = chr_center$center,
labels = chr_center$chr_var,
expand = c(1/100,1/100)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
strip.text = element_text(size = 15),
legend.text = element_text(size = 20),
axis.title.y = element_text(size = 15),
legend.title = element_blank(),
axis.title.x = element_text(size = 15)) +
ggtitle(ttle) +
ylab(scores_var) +
xlab(NULL)
if(is.na(facets)){
print(p)
}else{
p <- p + facet_wrap(~facets, ncol = 1, strip.position = "right", scales = "free_y")
print(p)
}
#thr
}
# Chunk 3
make_chromosome_manhattan <- function(dat, # the data set
chrs, # chromosomes to keep
chr, # the chromosome to visualize
scores_var, # value variable
probs1=0.95, # quatile considered outlier
probs2=0.99,
probs3=0.999,
facets, #faceting variable (i.e. contrasts, populations)
chr_var, # chromosome variable name (i.e. CHROM)
start_var, # start position (i.e. BIN_START)
end_var # end position (i.e. BIN_END)
){
require(dplyr)
require(ggplot2)
require(reshape2)
# Redefine variable names for compatibility with dplyr
names(dat)[names(dat) == scores_var] <- "scores_var"
names(dat)[names(dat) == chr_var] <- "chr_var"
names(dat)[names(dat) == start_var] <- "start_var"
names(dat)[names(dat) == end_var] <- "end_var"
if(!is.na(facets)) names(dat)[names(dat) == facets] <- "facets"
# Add genomic index
d <- dat %>%
ungroup() %>% # in case there is any grouping
dplyr::select(chr_var, start_var, end_var) %>% # get coordinates
unique() %>% # unique coordinates
filter(chr_var %in% chrs) %>% # keep desired chrs
mutate(chr_var = factor(chr_var, levels = chrs)) %>%
arrange(chr_var, start_var, end_var) %>% # arrange so that chrs go from 1 to n (human order)
left_join(dat, by = c("chr_var","start_var","end_var")) %>%  # merge with data
mutate(chr_var = factor(chr_var, levels = chrs),
win_width = end_var - start_var,
win_center = {start_var + win_width/2} %>% floor())
# Prepare thresholds
if(!is.na(facets)){
thr <- d %>%
group_by(facets) %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2),thr3 = quantile(scores_var, probs3))
}else{
thr <- d %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2), thr3 = quantile(scores_var, probs3))
}
ss <- filter(d, chr_var == chr) # subset by chr of interest
bks <- ss$win_center[seq(1,length(ss$win_center), 1000)]
labs <- ss$win_center[seq(1,length(ss$win_center), 1000)]
# base plot
p <- ggplot(data = ss, aes(x = win_center, y = scores_var)) +
geom_point(alpha = 0.5, show.legend = F) +
geom_hline(data = thr, aes(yintercept = thr1), color = "purple", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr2), color = "red", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr3), color = "blue", linetype = "dotdash", size = 1) +
scale_x_continuous(breaks = bks, labels = labs/1000, expand = c(1/100,1/100)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
strip.text = element_text(size = 15),
legend.text = element_text(size = 20),
axis.title.y = element_text(size = 15),
legend.title = element_blank(),
axis.title.x = element_text(size = 15)) +
ggtitle(paste0("Chromosome ", chr)) +
ylab(scores_var) +
xlab("Genomic Position (Kb)")
if(is.na(facets)){
print(p)
}else{
p <- p + facet_wrap(~facets, ncol = 1, strip.position = "right", scales = "free_y")
print(p)
}
}
# Chunk 4
dat <- read.table(gzfile(here("04_selection_analysis/data/fst_largewhite_vs_pietrain_50000bp.windowed.weir.fst.gz")),
stringsAsFactors = F, header = T)
head(dat)
dim(dat) #97363     6
# Chunk 5
dat <- dat %>% filter(N_VARIANTS >= 10, CHROM %in% c(1:18,"X"))
dim(dat) #94430     6
# Chunk 6
zdat <- dat %>%
mutate(is_x = (CHROM == "X")) %>%
group_by(is_x) %>%
mutate(z_MEAN_FST = scale(MEAN_FST)) %>%
ungroup() %>%
mutate(is_top5pct = z_MEAN_FST > quantile(z_MEAN_FST, 0.95)) # this column was not used downstream
dim(zdat) #94430     9
zdat %>% filter(is_top5pct) %>% dim() #4722    9
# Chunk 8
dat_summry <- zdat %>%
melt(measure.vars = c("MEAN_FST","z_MEAN_FST")) %>%
group_by(variable) %>%
summarise(n=n(),
global = mean(value),
min = min(value),
max = max(value),
q95 = quantile(value, 0.95),
q99 = quantile(value, 0.99),
q99.9 = quantile(value, 0.999))
dat_summry %>% knitr::kable()
# Chunk 9
zdat %>%
mutate(is_top_5pct = (z_MEAN_FST >= quantile(z_MEAN_FST, 0.95)),
is_top_1pct = (z_MEAN_FST >= quantile(z_MEAN_FST, 0.99)),
is_top_0.1pct = (z_MEAN_FST >= quantile(z_MEAN_FST, 0.999))) %>%
mutate(CHROM = factor(CHROM, levels = c(1:18,"X"))) %>%
group_by(CHROM) %>%
summarise(n_top_5pct = sum(is_top_5pct), n_top_1pct = sum(is_top_1pct), n_top_0.1pct = sum(is_top_0.1pct)) %>%
knitr::kable()
# Chunk 10
thr <- dat_summry %>% melt(measure.vars = c("q95","q99","q99.9"), id.vars = "variable")
names(thr)[1:2] <- c("Fst_class","quantile")
thr
dat <- read.table(gzfile(here("04_selection_analysis/data/fst_largewhite_vs_pietrain_50000bp.windowed.weir.fst.gz")),
stringsAsFactors = F, header = T)
head(dat)
dim(dat) #97363     6
# Chunk 1
library(dplyr)
library(ggplot2)
library(reshape2)
library(here)
# Chunk 2
make_faceted_genomewide_manhattan <- function(dat, # the data set
chrs, # chromosomes to keep
scores_var, # value variable
probs1=0.95, # quatile considered outlier
probs2=0.99,
probs3=0.999,
facets, #faceting variable (i.e. contrasts)
chr_var, # chromosome variable name (i.e. CHROM)
start_var, # start position (i.e. BIN_START)
end_var, # end position (i.e. BIN_END)
ttle
){
require(dplyr)
require(ggplot2)
require(reshape2)
# Redefine variable names for compatibility with dplyr
names(dat)[names(dat) == scores_var] <- "scores_var"
#names(dat)[names(dat) == label_var] <- "label_var"
names(dat)[names(dat) == chr_var] <- "chr_var"
names(dat)[names(dat) == start_var] <- "start_var"
names(dat)[names(dat) == end_var] <- "end_var"
if(!is.na(facets)) names(dat)[names(dat) == facets] <- "facets"
# Add genomic index
d <- dat %>%
ungroup() %>% # in case there is any grouping
dplyr::select(chr_var, start_var, end_var) %>% # get coordinates
unique() %>% # unique coordinates
filter(chr_var %in% chrs) %>% # keep desired chrs
mutate(chr_var = factor(chr_var, levels = chrs)) %>%
arrange(chr_var, start_var, end_var) %>% # arrange so that chrs go from 1 to n (human order)
mutate(genomic_index = 1:nrow(.)) %>% # add genomic index
left_join(dat, by = c("chr_var","start_var","end_var")) %>%  # merge with data
mutate(chr_var = factor(chr_var, levels = chrs))
# Find chr center
chr_center <- d %>%
group_by(chr_var) %>%
summarise(min=min(genomic_index), max=max(genomic_index), center = min+((max-min)/2)) %>%
mutate(chr_var = factor(chr_var, levels = chrs))
# Prepare thresholds
if(!is.na(facets)){
thr <- d %>%
group_by(facets) %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2),thr3 = quantile(scores_var, probs3))
}else{
thr <- d %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2), thr3 = quantile(scores_var, probs3))
}
# Define colors for chromosomes
len <- length(unique(d$chr_var))
chr_color <- vector(mode = "character", length = len)
chr_color[seq(1,len, 2)] <- "black"
chr_color[seq(2,len, 2)] <- "darkgrey"
# base plot
p <- ggplot(data = d, aes(x = genomic_index, y = scores_var, color = chr_var)) +
geom_point(alpha = 0.5, show.legend = F) +
scale_color_manual(values = chr_color) +
geom_hline(data = thr, aes(yintercept = thr1), color = "purple", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr2), color = "red", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr3), color = "blue", linetype = "dotdash", size = 1) +
scale_x_continuous(breaks = chr_center$center,
labels = chr_center$chr_var,
expand = c(1/100,1/100)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
strip.text = element_text(size = 15),
legend.text = element_text(size = 20),
axis.title.y = element_text(size = 15),
legend.title = element_blank(),
axis.title.x = element_text(size = 15)) +
ggtitle(ttle) +
ylab(scores_var) +
xlab(NULL)
if(is.na(facets)){
print(p)
}else{
p <- p + facet_wrap(~facets, ncol = 1, strip.position = "right", scales = "free_y")
print(p)
}
#thr
}
# Chunk 3
make_chromosome_manhattan <- function(dat, # the data set
chrs, # chromosomes to keep
chr, # the chromosome to visualize
scores_var, # value variable
probs1=0.95, # quatile considered outlier
probs2=0.99,
probs3=0.999,
facets, #faceting variable (i.e. contrasts, populations)
chr_var, # chromosome variable name (i.e. CHROM)
start_var, # start position (i.e. BIN_START)
end_var # end position (i.e. BIN_END)
){
require(dplyr)
require(ggplot2)
require(reshape2)
# Redefine variable names for compatibility with dplyr
names(dat)[names(dat) == scores_var] <- "scores_var"
names(dat)[names(dat) == chr_var] <- "chr_var"
names(dat)[names(dat) == start_var] <- "start_var"
names(dat)[names(dat) == end_var] <- "end_var"
if(!is.na(facets)) names(dat)[names(dat) == facets] <- "facets"
# Add genomic index
d <- dat %>%
ungroup() %>% # in case there is any grouping
dplyr::select(chr_var, start_var, end_var) %>% # get coordinates
unique() %>% # unique coordinates
filter(chr_var %in% chrs) %>% # keep desired chrs
mutate(chr_var = factor(chr_var, levels = chrs)) %>%
arrange(chr_var, start_var, end_var) %>% # arrange so that chrs go from 1 to n (human order)
left_join(dat, by = c("chr_var","start_var","end_var")) %>%  # merge with data
mutate(chr_var = factor(chr_var, levels = chrs),
win_width = end_var - start_var,
win_center = {start_var + win_width/2} %>% floor())
# Prepare thresholds
if(!is.na(facets)){
thr <- d %>%
group_by(facets) %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2),thr3 = quantile(scores_var, probs3))
}else{
thr <- d %>%
summarise(thr1 = quantile(scores_var, probs1), thr2 = quantile(scores_var, probs2), thr3 = quantile(scores_var, probs3))
}
ss <- filter(d, chr_var == chr) # subset by chr of interest
bks <- ss$win_center[seq(1,length(ss$win_center), 1000)]
labs <- ss$win_center[seq(1,length(ss$win_center), 1000)]
# base plot
p <- ggplot(data = ss, aes(x = win_center, y = scores_var)) +
geom_point(alpha = 0.5, show.legend = F) +
geom_hline(data = thr, aes(yintercept = thr1), color = "purple", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr2), color = "red", linetype = "dotdash", size = 1) +
geom_hline(data = thr, aes(yintercept = thr3), color = "blue", linetype = "dotdash", size = 1) +
scale_x_continuous(breaks = bks, labels = labs/1000, expand = c(1/100,1/100)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
strip.text = element_text(size = 15),
legend.text = element_text(size = 20),
axis.title.y = element_text(size = 15),
legend.title = element_blank(),
axis.title.x = element_text(size = 15)) +
ggtitle(paste0("Chromosome ", chr)) +
ylab(scores_var) +
xlab("Genomic Position (Kb)")
if(is.na(facets)){
print(p)
}else{
p <- p + facet_wrap(~facets, ncol = 1, strip.position = "right", scales = "free_y")
print(p)
}
}
dat <- read.table(gzfile(here("04_selection_analysis/data/fst_largewhite_vs_pietrain_50000bp.windowed.weir.fst.gz")),
stringsAsFactors = F, header = T)
head(dat)
dim(dat) #97363     6
list.files(here("04_selection_analysis/data/"))
here()
